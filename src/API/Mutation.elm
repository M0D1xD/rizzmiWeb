-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module API.Mutation exposing (..)

import API.InputObject
import API.Interface
import API.Object
import API.Scalar
import API.ScalarCodecs
import API.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias SignupRequiredArguments =
    { userData : API.InputObject.NewUserInput }


{-| ...
-}
signup : SignupRequiredArguments -> SelectionSet decodesTo API.Object.Signup -> SelectionSet decodesTo RootMutation
signup requiredArgs object_ =
    Object.selectionForCompositeField "signup" [ Argument.required "userData" requiredArgs.userData API.InputObject.encodeNewUserInput ] object_ identity


type alias AddMemberRequiredArguments =
    { companyId : API.ScalarCodecs.Id
    , email : String
    }


{-| ...
-}
addMember : AddMemberRequiredArguments -> SelectionSet decodesTo API.Object.AddMember -> SelectionSet (Maybe decodesTo) RootMutation
addMember requiredArgs object_ =
    Object.selectionForCompositeField "addMember" [ Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId), Argument.required "email" requiredArgs.email Encode.string ] object_ (identity >> Decode.nullable)


type alias NewCompanyOptionalArguments =
    { userId : OptionalArgument API.ScalarCodecs.Id }


type alias NewCompanyRequiredArguments =
    { companyData : API.InputObject.NewCompanyInput }


{-| ...
-}
newCompany : (NewCompanyOptionalArguments -> NewCompanyOptionalArguments) -> NewCompanyRequiredArguments -> SelectionSet decodesTo API.Object.NewCompany -> SelectionSet (Maybe decodesTo) RootMutation
newCompany fillInOptionals requiredArgs object_ =
    let
        filledInOptionals =
            fillInOptionals { userId = Absent }

        optionalArgs =
            [ Argument.optional "userId" filledInOptionals.userId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "newCompany" (optionalArgs ++ [ Argument.required "companyData" requiredArgs.companyData API.InputObject.encodeNewCompanyInput ]) object_ (identity >> Decode.nullable)


type alias NewRoleRequiredArguments =
    { roleData : API.InputObject.NewRoleInput }


{-| ...
-}
newRole : NewRoleRequiredArguments -> SelectionSet decodesTo API.Object.NewRole -> SelectionSet (Maybe decodesTo) RootMutation
newRole requiredArgs object_ =
    Object.selectionForCompositeField "newRole" [ Argument.required "roleData" requiredArgs.roleData API.InputObject.encodeNewRoleInput ] object_ (identity >> Decode.nullable)


type alias AddRoleRequiredArguments =
    { companyId : API.ScalarCodecs.Id
    , roleData : API.InputObject.NewRoleInput
    }


{-| ...
-}
addRole : AddRoleRequiredArguments -> SelectionSet decodesTo API.Object.AddRole -> SelectionSet (Maybe decodesTo) RootMutation
addRole requiredArgs object_ =
    Object.selectionForCompositeField "addRole" [ Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId), Argument.required "roleData" requiredArgs.roleData API.InputObject.encodeNewRoleInput ] object_ (identity >> Decode.nullable)


type alias AddProductCategoryRequiredArguments =
    { companyId : API.ScalarCodecs.Id
    , productCategoryData : API.InputObject.NewProductCategoryInput
    }


{-| ...
-}
addProductCategory : AddProductCategoryRequiredArguments -> SelectionSet decodesTo API.Object.AddProductCategory -> SelectionSet (Maybe decodesTo) RootMutation
addProductCategory requiredArgs object_ =
    Object.selectionForCompositeField "addProductCategory" [ Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId), Argument.required "productCategoryData" requiredArgs.productCategoryData API.InputObject.encodeNewProductCategoryInput ] object_ (identity >> Decode.nullable)


type alias NewProductRequiredArguments =
    { companyId : API.ScalarCodecs.Id
    , productData : API.InputObject.NewProductInput
    }


{-| ...
-}
newProduct : NewProductRequiredArguments -> SelectionSet decodesTo API.Object.NewProduct -> SelectionSet (Maybe decodesTo) RootMutation
newProduct requiredArgs object_ =
    Object.selectionForCompositeField "newProduct" [ Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId), Argument.required "productData" requiredArgs.productData API.InputObject.encodeNewProductInput ] object_ (identity >> Decode.nullable)


type alias AddCustomerRequiredArguments =
    { campaignId : API.ScalarCodecs.Id
    , customerData : API.InputObject.NewCustomerInput
    }


{-| ...
-}
addCustomer : AddCustomerRequiredArguments -> SelectionSet decodesTo API.Object.AddCustomer -> SelectionSet (Maybe decodesTo) RootMutation
addCustomer requiredArgs object_ =
    Object.selectionForCompositeField "addCustomer" [ Argument.required "campaignId" requiredArgs.campaignId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId), Argument.required "customerData" requiredArgs.customerData API.InputObject.encodeNewCustomerInput ] object_ (identity >> Decode.nullable)


type alias NewCampaignRequiredArguments =
    { campaignData : API.InputObject.NewCampaignInput
    , companyId : API.ScalarCodecs.Id
    , productId : API.ScalarCodecs.Id
    }


{-| ...
-}
newCampaign : NewCampaignRequiredArguments -> SelectionSet decodesTo API.Object.NewCampaign -> SelectionSet (Maybe decodesTo) RootMutation
newCampaign requiredArgs object_ =
    Object.selectionForCompositeField "newCampaign" [ Argument.required "campaignData" requiredArgs.campaignData API.InputObject.encodeNewCampaignInput, Argument.required "companyId" requiredArgs.companyId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId), Argument.required "productId" requiredArgs.productId (API.ScalarCodecs.codecs |> API.Scalar.unwrapEncoder .codecId) ] object_ (identity >> Decode.nullable)
