-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module API.InputObject exposing (..)

import API.Interface
import API.Object
import API.Scalar
import API.ScalarCodecs
import API.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildNewCampaignInput : NewCampaignInputRequiredFields -> (NewCampaignInputOptionalFields -> NewCampaignInputOptionalFields) -> NewCampaignInput
buildNewCampaignInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { description = Absent, platform = Absent }
    in
    { name = required.name, description = optionals.description, platform = optionals.platform }


type alias NewCampaignInputRequiredFields =
    { name : String }


type alias NewCampaignInputOptionalFields =
    { description : OptionalArgument String
    , platform : OptionalArgument String
    }


{-| Type for the NewCampaignInput input object.
-}
type alias NewCampaignInput =
    { name : String
    , description : OptionalArgument String
    , platform : OptionalArgument String
    }


{-| Encode a NewCampaignInput into a value that can be used as an argument.
-}
encodeNewCampaignInput : NewCampaignInput -> Value
encodeNewCampaignInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "platform", Encode.string |> Encode.optional input.platform ) ]


buildNewCompanyInput : NewCompanyInputRequiredFields -> (NewCompanyInputOptionalFields -> NewCompanyInputOptionalFields) -> NewCompanyInput
buildNewCompanyInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { email = Absent, phoneNumber = Absent }
    in
    { name = required.name, email = optionals.email, phoneNumber = optionals.phoneNumber }


type alias NewCompanyInputRequiredFields =
    { name : String }


type alias NewCompanyInputOptionalFields =
    { email : OptionalArgument String
    , phoneNumber : OptionalArgument String
    }


{-| Type for the NewCompanyInput input object.
-}
type alias NewCompanyInput =
    { name : String
    , email : OptionalArgument String
    , phoneNumber : OptionalArgument String
    }


{-| Encode a NewCompanyInput into a value that can be used as an argument.
-}
encodeNewCompanyInput : NewCompanyInput -> Value
encodeNewCompanyInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "email", Encode.string |> Encode.optional input.email ), ( "phoneNumber", Encode.string |> Encode.optional input.phoneNumber ) ]


buildNewCustomerInput : NewCustomerInputRequiredFields -> NewCustomerInput
buildNewCustomerInput required =
    { firstName = required.firstName, lastName = required.lastName, email = required.email, phoneNumber = required.phoneNumber }


type alias NewCustomerInputRequiredFields =
    { firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    }


{-| Type for the NewCustomerInput input object.
-}
type alias NewCustomerInput =
    { firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    }


{-| Encode a NewCustomerInput into a value that can be used as an argument.
-}
encodeNewCustomerInput : NewCustomerInput -> Value
encodeNewCustomerInput input =
    Encode.maybeObject
        [ ( "firstName", Encode.string input.firstName |> Just ), ( "lastName", Encode.string input.lastName |> Just ), ( "email", Encode.string input.email |> Just ), ( "phoneNumber", Encode.string input.phoneNumber |> Just ) ]


buildNewProductCategoryInput : NewProductCategoryInputRequiredFields -> (NewProductCategoryInputOptionalFields -> NewProductCategoryInputOptionalFields) -> NewProductCategoryInput
buildNewProductCategoryInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { description = Absent }
    in
    { name = required.name, description = optionals.description }


type alias NewProductCategoryInputRequiredFields =
    { name : String }


type alias NewProductCategoryInputOptionalFields =
    { description : OptionalArgument String }


{-| Type for the NewProductCategoryInput input object.
-}
type alias NewProductCategoryInput =
    { name : String
    , description : OptionalArgument String
    }


{-| Encode a NewProductCategoryInput into a value that can be used as an argument.
-}
encodeNewProductCategoryInput : NewProductCategoryInput -> Value
encodeNewProductCategoryInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ) ]


buildNewProductInput : NewProductInputRequiredFields -> (NewProductInputOptionalFields -> NewProductInputOptionalFields) -> NewProductInput
buildNewProductInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { description = Absent, productCategories = Absent }
    in
    { name = required.name, description = optionals.description, productCategories = optionals.productCategories }


type alias NewProductInputRequiredFields =
    { name : String }


type alias NewProductInputOptionalFields =
    { description : OptionalArgument String
    , productCategories : OptionalArgument (List (Maybe NewProductCategoryInput))
    }


{-| Type for the NewProductInput input object.
-}
type alias NewProductInput =
    { name : String
    , description : OptionalArgument String
    , productCategories : OptionalArgument (List (Maybe NewProductCategoryInput))
    }


{-| Encode a NewProductInput into a value that can be used as an argument.
-}
encodeNewProductInput : NewProductInput -> Value
encodeNewProductInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "productCategories", (encodeNewProductCategoryInput |> Encode.maybe |> Encode.list) |> Encode.optional input.productCategories ) ]


buildNewRoleInput : NewRoleInputRequiredFields -> (NewRoleInputOptionalFields -> NewRoleInputOptionalFields) -> NewRoleInput
buildNewRoleInput required fillOptionals =
    let
        optionals =
            fillOptionals
                { description = Absent }
    in
    { name = required.name, description = optionals.description, group = required.group, priorityLevel = required.priorityLevel }


type alias NewRoleInputRequiredFields =
    { name : String
    , group : Int
    , priorityLevel : Int
    }


type alias NewRoleInputOptionalFields =
    { description : OptionalArgument String }


{-| Type for the NewRoleInput input object.
-}
type alias NewRoleInput =
    { name : String
    , description : OptionalArgument String
    , group : Int
    , priorityLevel : Int
    }


{-| Encode a NewRoleInput into a value that can be used as an argument.
-}
encodeNewRoleInput : NewRoleInput -> Value
encodeNewRoleInput input =
    Encode.maybeObject
        [ ( "name", Encode.string input.name |> Just ), ( "description", Encode.string |> Encode.optional input.description ), ( "group", Encode.int input.group |> Just ), ( "priorityLevel", Encode.int input.priorityLevel |> Just ) ]


buildNewUserInput : NewUserInputRequiredFields -> NewUserInput
buildNewUserInput required =
    { firstName = required.firstName, lastName = required.lastName, email = required.email, phoneNumber = required.phoneNumber, password = required.password }


type alias NewUserInputRequiredFields =
    { firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , password : String
    }


{-| Type for the NewUserInput input object.
-}
type alias NewUserInput =
    { firstName : String
    , lastName : String
    , email : String
    , phoneNumber : String
    , password : String
    }


{-| Encode a NewUserInput into a value that can be used as an argument.
-}
encodeNewUserInput : NewUserInput -> Value
encodeNewUserInput input =
    Encode.maybeObject
        [ ( "firstName", Encode.string input.firstName |> Just ), ( "lastName", Encode.string input.lastName |> Just ), ( "email", Encode.string input.email |> Just ), ( "phoneNumber", Encode.string input.phoneNumber |> Just ), ( "password", Encode.string input.password |> Just ) ]
